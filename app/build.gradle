apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 21
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "org.openlmis.core"
        minSdkVersion 17
        targetSdkVersion 21
        flavorDimensions "1"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        if (project.hasProperty("prodsim")) {
            versionCode((new Date().getTime() / 1000).toInteger())
            versionName "$prodsim"
        } else {
            versionCode androidVersionCode.toInteger()
            versionName semanticVersion
        }
    }

    signingConfigs {
        debug {
            storeFile file("../scripts/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile file("../scripts/lmis_moz.jks")
            storePassword System.getenv("KSTOREPWD")
            keyAlias "clintonhealthaccess"
            keyPassword System.getenv("KEYPWD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        local {
            applicationId 'org.openlmis.core.local'
        }
        qa {
            applicationId 'org.openlmis.core.qa'
        }
        uat {
            applicationId 'org.openlmis.core.uat'
        }
        training {
            applicationId 'org.openlmis.core.training'
        }
        prd {
            applicationId 'org.openlmis.core'
        }
        ci {
            applicationId 'org.openlmis.core.ci'
        }
    }

    //the following code will change release apk file names to: {applicationId}-{versionCode}-release.apk
    //this is needed for in-app upgrade to work, because it's how the upgrade server matches package names
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk') && outputFile.name.contains("-release")) {
                def fileName = "${applicationId}-${versionCode}-release.apk"
                outputFileName =  fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}


apply plugin: "jacoco"

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = ['./src/main/java']

task jacocoTestReport(type: JacocoReport, dependsOn: "testLocalDebug") {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(dir: './build/intermediates/classes/local/debug/org')
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('./build/jacoco/testLocalDebug.exec')
}


apply plugin: 'checkstyle'
apply plugin: 'findbugs'


task checkstyle(type: Checkstyle) {
    configFile file("config/quality/checkstyle/checkstyle.xml")
    source 'src/main'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/migrations/**'

    classpath = files()
}

task checkci(dependsOn: ['checkstyle', 'testLocalDebug'])

task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("config/quality/findbugs/findbugs-filter.xml")
    classes = files("$project.buildDir/intermediates/classes/")

    source 'src/main'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        html.enabled = true
        xml.enabled = false
    }

    classpath = files()
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:support-annotations:22.2.1',
            'com.android.support:appcompat-v7:22.2.1',
            'com.android.support:design:22.2.1',
            'com.android.support:recyclerview-v7:23.2.1',
            'com.android.support:cardview-v7:22.2.1',
            'com.google.android.gms:play-services-analytics:7.8.0',
            'com.github.viethoa:fastscroller:1.2.0',
            'io.reactivex:rxjava:1.0.14',
            'io.reactivex:rxandroid:1.0.1',
            'com.squareup.retrofit:retrofit:1.9.0',
            'com.squareup.okhttp:okhttp-urlconnection:2.2.0',
            'com.squareup.okhttp:okhttp:2.2.0',
            'com.j256.ormlite:ormlite-android:4.45',
            'org.apmem.tools:layouts:1.10@aar',
            'org.roboguice:roboguice:3.0.1',
            'org.apache.commons:commons-lang3:3.3.2',
            'net.danlew:android.joda:2.9.1',
            'com.autoupdateapk:autoupdateapk:1.0.5'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.1@aar') { transitive = true }

    provided 'org.roboguice:roboblender:3.0.1',
             'org.projectlombok:lombok:1.12.6'

    testCompile 'junit:junit:4.12',
                'org.hamcrest:hamcrest-all:1.3',
                'org.mockito:mockito-all:1.10.19',
                'org.robolectric:robolectric:3.0',
                'org.robolectric:shadows-support-v4:3.0',
                'org.assertj:assertj-core:1.7.1',
                'com.natpryce:make-it-easy:4.0.1'
}

task bundleInstall(type: Exec) {
    workingDir "$projectDir/../functionalTests"
    executable 'bundle'
    args 'install'
}

task functionalTests(type: Exec, dependsOn: ['bundleInstall', 'assembleLocalDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-local-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @dev --format html --out reports.html"
}

task upgradeTestSetup(type: Exec, dependsOn: ['bundleInstall']) {
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    executable 'calabash-android'
    args "run", "$projectDir/../functionalTests/oldVersionApk/app-upgrade-v1.11.82-debug.apk", "--tags @upgrade_setup --format html --out upgrade_test_setup_reports.html"
}

task upgradeTests(type: Exec, dependsOn: ['bundleInstall', 'upgradeTestSetup', 'assembleUpgradeDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-upgrade-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @upgrade --format html --out upgrade_test_reports.html"
}

task regressionTests(type: Exec, dependsOn: ['bundleInstall', 'assembleRegressionDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-regression-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @regression --format html --out regression_test_reports.html"
}

task weeklyTests(type: Exec, dependsOn: ['bundleInstall', 'assembleRegressionDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-regression-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @weekly --format html --out weekly_test_reports.html"
}

task stressTests(type: Exec, dependsOn: ['bundleInstall', 'assembleRegressionDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-regression-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @STRESS_TEST --format html --out stress_test_report.html"
}

task monkeyTests(type: Exec, dependsOn: ['bundleInstall', 'assembleProdsimDebug']) {
    description 'Run Calabash Tests against specified apk (-PapkPath)'
    group JavaBasePlugin.VERIFICATION_GROUP
    workingDir "$projectDir/../functionalTests"

    def targetPath

    if (project.hasProperty("apkPath")) {
        targetPath = "$apkPath"
    } else {
        targetPath = "$projectDir/build/outputs/apk/app-prodsim-debug.apk"
    }

    executable 'calabash-android'
    args "run", "$targetPath", "--tags @monkey --format html --out monkey_test_report.html"
}